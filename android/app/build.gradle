apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
    debuggableVariants = ["playDebug"]
}

android {
    namespace 'com.bruste68.englishplayondevice.play' 
    compileSdk rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    // ✅ Whisper에 필요했던 ndkVersion 제거
    // ndkVersion rootProject.ext.ndkVersion

    defaultConfig {
        applicationId 'com.bruste68.englishplayondevice'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        buildConfigField("boolean", "REACT_NATIVE_UNSTABLE_USE_RUNTIME_SCHEDULER_ALWAYS", (findProperty("reactNative.unstable_useRuntimeSchedulerAlways") ?: true).toString())
        buildConfigField("boolean", "IS_HERMES_ENABLED", "true")
        buildConfigField("boolean", "IS_NEW_ARCHITECTURE_ENABLED", "false")
        buildConfigField("boolean", "DEBUG", "true")
    }

    buildFeatures {
        buildConfig = true
    }

    flavorDimensions "store"
    productFlavors {
        play {
            dimension "store"
            applicationId "com.bruste68.englishplayondevice.play"
            versionNameSuffix "-play"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            matchingFallbacks = ["debug", "release"]
        }
        release {
            signingConfig signingConfigs.debug
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    applicationVariants.all { variant ->
        println "✅ 생성된 빌드 Variant: ${variant.name}"
        println "👉 packageName: ${variant.applicationId}"
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation project(':react-native-iap')
    implementation 'com.android.billingclient:billing:6.0.1'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    // ✅ Whisper 관련 의존성 제거
    // implementation project(':react-native-whisper')
    // implementation 'com.arthenica:ffmpeg-kit-min:6.0'

    implementation 'androidx.startup:startup-runtime:1.1.1'

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    implementation("com.facebook.react:flipper-integration")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json')"].execute(null, rootDir).text.trim(), "../native_modules.gradle")
applyNativeModulesAppBuildGradle(project)
